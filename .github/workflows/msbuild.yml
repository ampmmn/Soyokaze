# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: MSBuild

on:
  push:
    branches: [ "main", "py_extension" ]
  pull_request:
    branches: [ "main" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: ./src/Soyokaze.sln

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: ReleaseStatic
  BUILD_CONFIGURATION_TEST: UnitTest
  TIDYLIB_STATICRUNTIME: ON
  STATICLIB_POSTFIX: rtst


permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Build spdlog
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cmd /c "if not exist build mkdir -p externals\spdlog\build"
        cd externals/spdlog/build
        cmake ..
        msbuild /m /p:Configuration=Release /p:Platform=x64 spdlog.sln

    - name: Build tidy-html5
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cd externals/tidy-html5/build/cmake
        cmake ../.. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIB:BOOL=OFF -DUSE_STATIC_RUNTIME=${{env.TIDYLIB_STATICRUNTIME}} -DSUPPORT_CONSOLE_APP=OFF -DCMAKE_RELEASE_POSTFIX=${{env.STATICLIB_POSTFIX}}
        cmake --build . --config Release

    - name: Patch absl options
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        powershell -Command "(Get-Content externals/abseil-cpp/absl/base/options.h) -replace '#define ABSL_OPTION_USE_STD_STRING_VIEW 2', '#define ABSL_OPTION_USE_STD_STRING_VIEW 1' | Set-Content externals/abseil-cpp/absl/base/options.h"

    - name: Build abseil-cpp
      working-directory: ${{env.GITHUB_WORKSPACE}}
      shell: cmd
      run: |
        cd externals/abseil-cpp
        cmd /c "if not exist build mkdir -p build"
        cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DABSL_ENABLE_INSTALL=ON -DABSL_MSVC_STATIC_RUNTIME=ON -DCMAKE_RELEASE_POSTFIX=${{env.STATICLIB_POSTFIX}} -DCMAKE_EXPORT_PACKAGE_REGISTRY=ON -DCMAKE_POLICY_DEFAULT_CMP0090=NEW ..
        cmake --build . --config Release --clean-first
        cmake --install . --config Release
        cd install/lib
        for /f "usebackq delims=" %%i in (`"%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do set InstallDir=%%i
        call "%InstallDir%\VC\Auxiliary\Build\vcvarsall.bat" x64
        lib.exe /out:absl_all%STATICLIB_POSTFIX%.lib *%STATICLIB_POSTFIX%.lib

    - name: Build abseil-cpp debug
      working-directory: ${{env.GITHUB_WORKSPACE}}
      shell: cmd
      run: |
        cd externals/abseil-cpp
        cmd /c "if not exist build mkdir -p build"
        cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DABSL_ENABLE_INSTALL=ON -DABSL_MSVC_STATIC_RUNTIME=OFF -DCMAKE_DEBUG_POSTFIX=_d -DCMAKE_EXPORT_PACKAGE_REGISTRY=ON -DCMAKE_POLICY_DEFAULT_CMP0090=NEW ..
        cmake --build . --config Debug --clean-first
        cmake --install . --config Debug
        cd install/lib
        for /f "usebackq delims=" %%i in (`"%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath`) do set InstallDir=%%i
        call "%InstallDir%\VC\Auxiliary\Build\vcvarsall.bat" x64
        lib.exe /out:absl_all_d.lib *_d.lib

    - name: Build re2
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cd externals/re2
        # setup build directory
        cmd /c "if not exist build mkdir -p build"
        cd build
        # setup cmake
        $abseil_dir_path = (Resolve-Path "..\..\abseil-cpp\build\install\lib\cmake\absl").Path
        cmake -DCMAKE_INSTALL_PREFIX=install -Dabsl_DIR="$abseil_dir_path" -DCMAKE_RELEASE_POSTFIX="${{env.STATICLIB_POSTFIX}}" -DCMAKE_CXX_FLAGS_RELEASE:STRING="/MT /O2 /Ob2 /DNDEBUG" ..
        # build
        cmake --build . --config Release
        # install to build/install
        cmake --install . --config Release

    - name: Build re2 debug
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cd externals/re2
        # setup build directory
        cmd /c "if not exist build mkdir -p build"
        cd build
        # setup cmake
        $abseil_dir_path = (Resolve-Path "..\..\abseil-cpp\build\install\lib\cmake\absl").Path
        cmake -DCMAKE_INSTALL_PREFIX=install -Dabsl_DIR="$abseil_dir_path" -DCMAKE_DEBUG_POSTFIX=_d -DCMAKE_CXX_FLAGS_DEBUG:STRING="/Od /Ob0 /EHsc /RTC1 /MDd" ..
        # build
        cmake --build . --config Debug
        # install to build/install
        cmake --install . --config Debug

    - name: Build nanobind
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cd externals/nanobind
        # setup build directory
        cmd /c "if not exist build mkdir -p build"
        cd build
        # setup cmakefor Debug configuration.
        cmake -DCMAKE_CXX_FLAGS="/DPy_LIMITED_API=0x03120000" ..
        # build(Debug)
        cmake --build . --config Debug -t nanobind-static
        # setup cmake for Release configuration.
        cmake -DCMAKE_CXX_FLAGS="/DPy_LIMITED_API=0x03120000" -DCMAKE_RELEASE_POSTFIX=rtst ..
        # build(Release)
        cmake --build . --config Release -t nanobind-static

    - name: Build Release
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=x64 ${{env.SOLUTION_FILE_PATH}}

    - name: Build UnitTest
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION_TEST}} /p:Platform=x64 ${{env.SOLUTION_FILE_PATH}}

    - name: Run UnitTest
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: ./dist/x64/UnitTest/SoyokazeUnitTest.exe

