# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: MSBuild

on:
  push:
    branches: [ "main", "logger", "re2" ]
  pull_request:
    branches: [ "main", "logger", "re2" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: ./src/Soyokaze.sln

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: ReleaseStatic
  BUILD_CONFIGURATION_TEST: UnitTest
  TIDYLIB_STATICRUNTIME: ON
  STATICLIB_POSTFIX: rtst


permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Set up Cache for spdlog
      uses: actions/cache@v3
      with:
        path: externals/spdlog/build
        key: ${{ runner.os }}-spdlog-${{ hashFiles('**/externals/spdlog/**') }}
        restore-keys: |
          ${{ runner.os }}-spdlog-

    - name: CMake spdlog
      working-directory: ${{env.GITHUB_WORKSPACE}}
      continue-on-error: true
      shell: cmd
      run: |
        cd externals/spdlog
        cmd /c "if not exist build mkdir -p build"
        cd build
        cmake ..
        if errorlevel 1 cmake --refresh ..

    - name: Build spdlog
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cd externals/spdlog/build
        msbuild /m /p:Configuration=Release /p:Platform=x64 spdlog.sln

    - name: Set up Cache for tidy-html5
      uses: actions/cache@v3
      with:
        path: externals/tidy-html5/build
        key: ${{ runner.os }}-tidy-html5-${{ hashFiles('**/externals/tidy-html5/**') }}
        restore-keys: |
          ${{ runner.os }}-tidy-html5-

    - name: Build tidy-html5
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cd externals/tidy-html5/build/cmake
        cmake ../.. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIB:BOOL=OFF -DUSE_STATIC_RUNTIME=${{env.TIDYLIB_STATICRUNTIME}} -DSUPPORT_CONSOLE_APP=OFF -DCMAKE_RELEASE_POSTFIX=${{env.STATICLIB_POSTFIX}}
        cmake --build . --config Release

    - name: Build absl-cpp
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cd externals/absl-cpp
        # setup build directory
        cmd /c "if not exist build mkdir -p build"
        cd build
        # setup cmake
        cmake -DCMAKE_INSTALL_PREFIX=install -DABSL_MSVC_STATIC_RUNTIME=ON -DCMAKE_RELEASE_POSTFIX=${{env.STATICLIB_POSTFIX}} ..
        # build
        cmake --build . --config Release
        # install to build/install
        cmake --install . --config Release
        cd install/lib
        # concatenate all .lib files.
        cmd /c "lib.exe /out:absl_all${{env.STATICLIB_POSTFIX}}.lib *${{env.STATICLIB_POSTFIX}}.lib"

    - name: Build re2
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cd externals/re2
        # setup build directory
        cmd /c "if not exist build mkdir -p build"
        cd build
        # setup cmake
        cmake -DCMAKE_INSTALL_PREFIX=install -DCMAKE_PREFIX_PATH=..\abseil-cpp\build\install -DCMAKE_RELEASE_POSTFIX=${{env.STATICLIB_POSTFIX}} -DCMAKE_CXX_FLAGS_RELEASE:STRING="/MT /O2 /Ob2 /DNDEBUG" ..
        # build
        cmake --build . --config Release
        # install to build/install
        cmake --install . --config Release

    - name: Build Release
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=x64 ${{env.SOLUTION_FILE_PATH}}

    - name: Build UnitTest
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION_TEST}} /p:Platform=x64 ${{env.SOLUTION_FILE_PATH}}

    - name: Run UnitTest
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: ./dist/x64/UnitTest/SoyokazeUnitTest.exe

